#!/bin/bash

# Script to install kubeadm, kubectl, kubelet, containerd, runc and cni plugin on a raspberry pi 4 with Raspberry Pi OS (64).
# Must be run as root (sudo -i)
# After script runs you will have to run the following manually
# sudo apt-get update && sudo apt-get upgrade
# kubeadm init   OR   kubeadm join   with the token generated by your controlplane node

# Install vim and git
apt-get install -y git vim

# Set cgroup required by kubeadm pre-flight checks
BOOTFILE="/boot/cmdline.txt"

if ! grep -q "cgroup_enable=cpuset" "$BOOTFILE"; then
  sed -i '${s/$/ cgroup_enable=cpuset/}' $BOOTFILE
fi

if ! grep -q "cgroup_enable=memory" "$BOOTFILE"; then
  sed -i '${s/$/ cgroup_enable=memory/}' $BOOTFILE
fi

# Disable swap
swapoff -a
apt-get purge -y dphys-swapfile
rm /var/swap

# Forwarding IPv4 and letting iptables see bridged traffic
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sysctl --system

# Dowload and install containerd
# Release versions can be found here https://github.com/containerd/containerd/releases
curl -L https://github.com/containerd/containerd/releases/download/v1.6.8/containerd-1.6.8-linux-arm64.tar.gz -o containerd-1.6.8-linux-arm64.tar.gz

tar Cxzvf /usr/local containerd-1.6.8-linux-arm64.tar.gz

mkdir -p /usr/local/lib/systemd/system
touch /usr/local/lib/systemd/system/containerd.service 

# Copy the contents of https://github.com/containerd/containerd/blob/main/containerd.service into containerd.service file
cat <<EOF | sudo tee /usr/local/lib/systemd/system/containerd.service
# Copyright The containerd Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[Unit]
Description=containerd container runtime
Documentation=https://containerd.io
After=network.target local-fs.target

[Service]
#uncomment to enable the experimental sbservice (sandboxed) version of containerd/cri integration
#Environment="ENABLE_CRI_SANDBOXES=sandboxed"
ExecStartPre=-/sbin/modprobe overlay
ExecStart=/usr/local/bin/containerd

Type=notify
Delegate=yes
KillMode=process
Restart=always
RestartSec=5
# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNPROC=infinity
LimitCORE=infinity
LimitNOFILE=infinity
# Comment TasksMax if your systemd version does not supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
OOMScoreAdjust=-999

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now containerd

# Download and install runc
# Latest version can be found here https://github.com/opencontainers/runc/releases
curl -L https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.arm64 -o runc.arm64
install -m 755 runc.arm64 /usr/local/sbin/runc

# Install CNI Plugin
# Release versions can be found here https://github.com/containernetworking/plugins/releases

curl -L https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-arm64-v1.1.1.tgz -o cni-plugins-linux-arm64-v1.1.1.tgz
mkdir -p /opt/cni/bin
tar Cxzvf /opt/cni/bin cni-plugins-linux-arm64-v1.1.1.tgz

# Generate containerd config file
mkdir -p /etc/containerd
containerd config default > /etc/containerd/config.toml
sed -i 's/SystemdCgroup.*/SystemdCgroup = true/g' /etc/containerd/config.toml
systemctl restart containerd

# Install kubeadm, kubelet, kubectl
apt-get update
apt-get install -y apt-transport-https ca-certificates curl

curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
bashrc="$parent_path/.bashrc"

if ! grep -q 'source <(kubectl completion bash)' "$bashrc"; then
  echo 'source <(kubectl completion bash)' >> $bashrc
fi

if ! grep -q 'alias k=kubectl' "$bashrc"; then
  echo 'alias k=kubectl' >> $bashrc
fi

if ! grep -q 'complete -o default -F __start_kubectl k' "$bashrc"; then
  echo 'complete -o default -F __start_kubectl k' >> $bashrc
fi

reboot